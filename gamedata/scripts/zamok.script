-- -*- mode: lua; encoding: windows-1251 -*-

local zamok_box = {}
local can_lock_visuals = {
	["equipment_box_01_case"] = true,
	["equipment_box_02_case"] = true,
	["equipment_box_03_case"] = true,
	["equipment_electric_box_01_case"] = true,
	["equipment_electric_box_02_case"] = true,
	["equipment_hatch_01_case"] = true,
	["equipment_hatch_02_case"] = true,
	["equipment_instrument_case_01_case"] = true,
	["equipment_seif_01_case"] = true,
	["equipment_seif_02_case"] = true,
	["equipment_seif_03_case"] = true,
	["equipment_zaz968_case"] = true,
	["expl_dinamit"] = true,
	["seif_01"] = true
}

function restore(se_box, box_id)
	if se_box and se_box:clsid() == clsid.inventory_box then
		if zamok_box[box_id] == nil then
			local data = netpk:get(se_box, netpk.fState)
			local t = netpk:parse_custom_data(data.custom_data)
			if t["password"] then
			--	log1("add protected box: "..se_box:name())
				table.insert(amk_offline_alife.protected.ids, box_id)
			end
			zamok_box[box_id] = 1
		else
			zamok_box[box_id] = zamok_box[box_id] + 1
		end
	end
end

function remove(box, item)
	local box_id = box:id()
	local n = zamok_box[box_id]
	if n==nil then return end
	if n>1 then
		zamok_box[box_id] = n - 1
	else	-- проверим, стоит ли ящик под защитой
		for i, v in pairs(amk_offline_alife.protected.ids) do
			if v == box_id then
				this.change_box_data(box)
				table.remove(amk_offline_alife.protected.ids, i)
				--amk_offline_alife.update_tables(level.name())
				ShowAutohideMsg( "С тайника убрали замок.", 3000 )
				break
			end
		end
		zamok_box[box_id] = nil
	end
end

function add(item)
	local sitem = alife():object(item:id()) -- получаем серверный объект
	if sitem == nil then return end		-- если удалили замок, то ничего не делаем
	local pid = sitem.parent_id
	local se_box = alife():object(pid) -- получаем серверный объект хозяина
	if se_box ~= nil and se_box:clsid() == clsid.inventory_box then
		if zamok_box[pid]==nil then		-- если в тайнике ещё нет замков
			zamok_box[pid] = 1
			-- Покажем меню
			local box = level.object_by_id(pid)
			if game_options.LockBoxOnly then
				local visual = string.explode(box:get_visual_name(), "\\")
				visual = visual[#visual]
			--	log1("# "..box:name().." : "..visual)
				if can_lock_visuals[visual] then
					this.codelock(pid, 1)
				else
					this.codelock(pid, 2)
				end
			else
				this.codelock(pid, 1)
			end
		else	-- иначе - ничего не делаем
			zamok_box[pid] = zamok_box[pid]+1
		end
	end
end

class "codelock"

function codelock:__init( box_id, mode )
	BlockUIDescr(true)
	self.cls = self

	if mode == 2 then
		local msg = "На этот тайник невозможно установить замок."
		local func = function()
			self.cls = nil
			BlockUIDescr(false)
		end
		ui_messagebox_new.UIMessageBoxEx( "ok_alarm", msg, func )
		return
	end

	self.box_id = box_id
	self.install = (mode == 1)

	if not self.install then
		local se_box = alife():object( box_id )
		local data = netpk:get(se_box, netpk.fState)
		local t = netpk:parse_custom_data(data.custom_data)
		self.code = (t['password'] and t['password']['code']) or "111"
	end

	level.start_stop_menu( ui_numpad.numpad( self ), true )
end

function codelock:Quit()
	if self.install == false then 
		hotkeys.clear_used_box()
		local box = level.object_by_id( self.box_id )
		box:set_nonscript_usable(true)
	end
	self.cls = nil
	BlockUIDescr(false)
end

function codelock:OnNumberReceive( text, mode )
--	log( "codelock: code = %s", text )
	if #text == 0 or mode == false then
		self:Quit()
		return
	end
	
	if self.install then
		local se_box = alife():object( self.box_id )
		local data = {}
		data.custom_data =	"[logic]\n"..
							"cfg = scripts\\code_inventory_box.ltx\n"..
							"[password]\n"..
							"code = "..text
		netpk:modify( se_box, data, netpk.fState )
		table.insert( amk_offline_alife.protected.ids, self.box_id )
		--amk_offline_alife.update_tables(level.name())
		ShowAutohideMsg( "Заперли тайник на замок.", 3000 )
		-- Перезагружаем логику
		local st = db.storage[ self.box_id ]
		st = {}
		local box = level.object_by_id( self.box_id )
		xr_logic.initialize_obj(box, st, false, db.actor, modules.stype_item, "scripts\\code_inventory_box.ltx")
		
		self:Quit()
	else
		if self.code == text then
			local box = level.object_by_id( self.box_id )
			box:set_nonscript_usable(true)
			self.cls = nil
			BlockUIDescr(false)
			start_small_timer( 500, function() db.actor:open_inventory_box(box) end )
		else
			self:Quit()
		end
	end
end


-- Вызывается при открытии тайника из логики, если на нём стоит замок
function show_codelock(actor, box)
	local se_box = alife():object( box:id() )
	if se_box then
	--	log1("show_codelock for se_box: "..se_box:name())
		box:set_nonscript_usable( false )
		this.codelock( box:id(), 0 )
	end
end

-- Забираем тайник вместе с содержимым на 'kUSE + Shift'
-- Вызывается из логики
function transfer_all(actor, box)
	if not ShiftPressed() then return false end
	
	box:set_nonscript_usable( false )
	shiftCheckDropItem()

	local n = box:inv_box_count()
	local a = db.actor
	if n>0 then
		local item
		for i=0,n-1 do
			item = box:object_from_inv_box(i)
			box:transfer_item(item, a)
		end
	end
	local sim = alife()
	local se_box = sim:object(box:id())
	if se_box then sim:release(se_box, true) end
	sim:create("treasure_item", vector():set(0,0,0), 0, 0, 0)
	hotkeys.clear_used_box()
end

-- Перезагрузка логики ящика без перевода в оффлайн
function change_box_data(box)
	local box_id = box:id()
	local se_box = alife():object(box_id)
	if se_box then
	--	log1("box found: "..se_box:name())
		local inifilename = nil
		local data = {}
		if se_box:section_name() == "m_inventory_box" then	-- самопальный тайник
			data.custom_data = "[logic]\ncfg = scripts\\new_inventory_box.ltx"
			inifilename = "scripts\\new_inventory_box.ltx"
		else		-- какой-то другой
			data.custom_data = ""
			inifilename = "scripts\\treasure_inventory_box.ltx"
		end
		netpk:modify(se_box, data, netpk.fState)
		-- Перезагружаем логику
		local st = db.storage[box_id]
		st = {}
		xr_logic.initialize_obj(box, st, false, db.actor, modules.stype_item, inifilename)
	end
end

