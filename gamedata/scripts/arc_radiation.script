local DOSE_TIRING = 2500
local DOSE_HARMFUL = 5000
local DOSE_DEADLY = 35000

local rad_dose = 0

local last_anom_hit_time = 0

local art_hits = {}

local arts_rad = 0
local anom_rad = 0
-----------------------------------------------------------------------------------
local inv_arts_radiation = 0
local arts_satiety = 0

local game_ms = 1100 / level.main_time_factor

function change_arts_satiety(delta)
	arts_satiety = arts_satiety + delta
end

function change_inv_radiation(delta)
	inv_arts_radiation = inv_arts_radiation + delta
end
-----------------------------------------------------------------------------------
local updFlag, dlt1, dlt2 = 0, 0, 0
local wait_time = 0

function on_actor_update(delta)
	dlt1 = dlt1 + delta
	dlt2 = dlt2 + delta
	if updFlag == 1 then
		updFlag = 2
		local f = dlt1/game_ms
		
		if arts_satiety~=0 then
			db.actor.satiety = arts_satiety*f
		end
		
		if inv_arts_radiation~=0 and not cars_radiation_fix.actor_inside_car() then
			db.actor.radiation = inv_arts_radiation*f
		end
		
		dlt1 = 0
	elseif updFlag == 0 then
		updFlag = 1
		
		arc_inventory.on_actor_update(delta)
		
		local r = db.actor.radiation
		local d = r - 0.05
		mod_rad_dose(d*4000)
		db.actor.radiation = -d
	
		if d>0.000001 then
			local rp = arc_inventory.cur_rad_protection
			if arc_inventory.crp_changed or (rp==0 and d>0.005) then
				anom_rad = d / (1-rp)
				last_anom_hit_time = 0
			else
				table.insert(art_hits, 1, {time_since_hit = 0, hit_power = d})
			end
		end
		
		if last_anom_hit_time>400 then
			anom_rad = 0
			last_anom_hit_time = 0
		else
			last_anom_hit_time = last_anom_hit_time + dlt2
		end
		
		local i = 1
		local hits_time, hits_summ = 0, 0
		
		while art_hits[i] do
			local t = art_hits[i].time_since_hit + dlt2
			
			if t > 200 then
				table.remove(art_hits, i)
			else
				hits_time = t
				hits_summ = hits_summ + art_hits[i].hit_power
				art_hits[i].time_since_hit = t
				i = i + 1
			end
		end
		
		arts_rad = (hits_time > 0) and ( hits_summ * 200 / hits_time ) or 0
		
		dlt2 = 0
	else
		wait_time = wait_time + delta
		if wait_time > 150 then
			updFlag = 0
			wait_time = 0
		end
	end
	
	arc_ui_dosimeter.update(delta)
end

function save_rad_dose()
	amk.save_variable("rad_dose", rad_dose)
end
	
function get_rad_level()
	return (arts_rad + anom_rad) / 0.1
end

function get_rad_dose()
	return rad_dose
end

function get_dose_string()
	return string.format("%6.2f", rad_dose/100)
end

function get_dose_string_color()
	local rd = rad_dose / DOSE_DEADLY
	return math.min(round(196+196*rd),255), math.max(round(255-255*rd),0), math.max(round(196-255*rd),0)
end

function set_rad_dose(new_dose)
	if new_dose > 0 then
		rad_dose = new_dose
	else
		rad_dose = 0
	end
	
	local rd
	rd = (rad_dose > DOSE_HARMFUL) and (rad_dose - DOSE_HARMFUL) / (DOSE_DEADLY - DOSE_HARMFUL) or 0
	if rd<1 then
		arc_health.set_health_threshold(1-rd*rd)
	else
		arc_health.set_health_threshold(1-math.pow(rd,6))
	end
	
	arc_health.set_psy_threshold(1-rd/3)
	
	rd = (rad_dose > DOSE_TIRING) and (rad_dose - DOSE_TIRING) / (DOSE_DEADLY - DOSE_TIRING) or 0
	
	arc_health.set_power_penalty(rd*1.5)
end

function mod_rad_dose(dose_delta)
	if dose_delta > 0.01 then
		arc_ui_dosimeter.fade(true)
	elseif dose_delta < 0 then
		dose_delta = dose_delta / 10
	end
	
	set_rad_dose(rad_dose+dose_delta)
end
-----------------------------------------------------------------------------------
function use_antirad(delta)
	mod_rad_dose(delta*1000)
end
-----------------------------------------------------------------------------------
local upd_time_tele = nil
function spawn_telepatic()
	if (upd_time_tele or 0) < time_global() then
		upd_time_tele = 1000 + time_global()
		
		local h = hit()
		h.draftsman = db.actor
		h.direction = vector():set(0,0,0)
		h:bone("bip01_spine")
		h.type = hit.chemical_burn
		h.power = 0.01
		h.impulse = 50
		db.actor:hit(h)          
		level.add_pp_effector("amk_shoot.ppe", 2011, false)
	end
end
-----------------------------------------------------------------------------------
function init()
	rad_dose = amk.load_variable("rad_dose", 0)
	local n = key_bindings.kSCORES
	xr_s.register_callback("on_key_release", function(dik, bind)
		if bind == n then
			arc_ui_dosimeter.fade(true, -1)
		end
	end)
--[[ фикс солнца на R2
	local con = get_console()
	local r = con:get_string("renderer")
	if r == "renderer_r2" or r == "renderer_r2a" then
		local cmds = {
			"r2_sun_depth_far_bias -0.00002 -0.0001",
			"r2_sun_depth_far_scale 0.9999",
			"r2_sun_depth_near_bias 0.00001",
			"r2_sun_depth_near_scale 1.",
			"r2_sun_near 18.",
			"r2_sun_near_border 1."
		}
		for i, s in ipairs(cmds) do
			con:execute(s)
		end
	end
]]
end
