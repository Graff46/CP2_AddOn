-- -*- mode: lua; encoding: windows-1251 -*-
--[[-----------------------------------------------------------------------------------------------------
	File              : rus_edit_box.script
	Description       : Ёмул€ци€ русской раскладки клавиатуры в CUIEditBox (“„)
	Created           : 13.11.2014
	Copyright         : naxac
---------------------------------------------------------------------------------------------------------
ќб€зательные передаваемые параметры:
 		x, y - координаты верхнего левого угла,
		width - ширина окна (высота фиксированна€, 25), рекомендуетс€ хот€ бы >=100
		stat - элемент базового класса, к которому приаттачиваем бокс (относительно которого берутс€ координаты)
type - необ€зательный параметр: текстура бокса (см. таблицу box_textures). ѕо умолчанию - ui_linetext_e

ћетоды:	GetText() - получить введЄнный текст,
		SetText(string) - поместить в поле текст
		SetTextColor(number,number,number,number) - задать цвет текста (A,R,G,B)

ѕример использовани€:
	self.edit_box = rus_edit_box.NewEditBox(self.form, 10, 45, 200, "pda")	-- инициализируем класс
ќб€зательно добавл€ем в каллбэк на нажатие клавиш базового класса (OnKeyboard):
	self.edit_box:KeyboardCallback(dik)
--]]-----------------------------------------------------------------------------------------------------
class "NewEditBox" (CUIScriptWnd)

local string_sub = string.sub
local string_find = string.find
local kr = "_"	-- курсор
local box_textures = {
	def		= "ui_linetext_e",
	pda		= "ui_icons_PDA_dialog_string"
	}

function NewEditBox:__init(stat, x, y, width, type) super()
	self.text = kr
	self.lang = "RUS"
	
	local texture = box_textures["def"]
	if type and box_textures[type] then
		texture = box_textures[type]
	end
	
	self.st = CUIStatic()
	self.st:Init(x, y, width, 25)
	
	stat:AttachChild(self.st)
	
	self.edit_box = CUIEditBox()
	self.edit_box:SetAutoDelete(true)
    self.edit_box:Init(0,2,width-39,22)
	self.edit_box:InitTexture(texture)
	self.edit_box:SetTextColor(GetARGB(0,0,0,0))
	self.edit_box:SetFont(GetFontLetterica18Russian())
    self.st:AttachChild(self.edit_box)
	
	self.text_stat = CUIStatic()
	self.text_stat:SetAutoDelete(true)
    self.text_stat:Init(2,4,width-42,22)
	self.text_stat:SetText(self.text)
	self.text_stat:SetTextColor(255,180,255,140)
	self.text_stat:SetFont(GetFontLetterica18Russian())
    self.st:AttachChild(self.text_stat)
	
	self.btn_lang = CUI3tButton()
	self.btn_lang:Init(width-37,0,37,25)
	self.btn_lang:SetAutoDelete(true)
	self.btn_lang:InitTexture("ui_hud_button_voting_01")
	self.btn_lang:SetText(self.lang)
	self.btn_lang:SetTextAlign(CGameFont.alCenter)
	self.btn_lang:SetTextY(1)
	self.btn_lang:SetTextColor(255,216,186,140)
	self.st:AttachChild(self.btn_lang)
	self:Register(self.btn_lang, "btn_lang")
	self:AddCallback("btn_lang", ui_events.BUTTON_CLICKED, self.on_ButtonChangeLang_clicked, self)
end

function NewEditBox:on_ButtonChangeLang_clicked()
	self.lang = (self.lang == "RUS" and "ENG") or "RUS"
	self.btn_lang:SetText(self.lang)
end

function NewEditBox:GetText()
	return string.gsub(self.text, kr, "")
end

function NewEditBox:SetText(text)
	self.text = text..kr
	self.text_stat:SetText(self.text)
end

function NewEditBox:SetTextColor(a,r,g,b)
	self.text_stat:SetTextColor(a,r,g,b)
end

function NewEditBox:ChangeText(letter)
	if letter == kr then return end
	local lett = letter and (self.lang=="RUS" and translit(letter) or letter) or ""
	
	local s1, s2 = separate_srt(self.text,kr)
	self.text = s1..lett..kr..s2
	
	self.text_stat:SetText(self.text)
end

function NewEditBox:DeleteLetter(mode)
	local s1, s2 = separate_srt(self.text,kr)
	if mode then
		s1 = #s1>1 and string_sub(s1,1,-2) or ""
	else
		s2 = #s2>1 and string_sub(s2,2) or ""
	end
	self.text = s1..kr..s2
	
	self.text_stat:SetText(self.text)
end

function NewEditBox:CursorMove(mode)
	local s1, s2 = separate_srt(self.text,kr)
	local str1, str2 = "", ""
	if mode then
		str1 = s1..(#s2>0 and string_sub(s2,1,1) or "")
		str2 = #s2>1 and string_sub(s2,2) or ""
	else
		str1 = #s1>1 and string_sub(s1,1,-2) or ""
		str2 = (#s1>0 and string_sub(s1,-1) or "")..s2
	end
	self.text = str1..kr..str2
	
	self.text_stat:SetText(self.text)
end

function NewEditBox:KeyboardCallback(dik)
	if dik == DIK_keys.DIK_BACK then self:DeleteLetter(true)
	elseif dik == DIK_keys.DIK_DELETE then self:DeleteLetter(false)
	elseif dik == DIK_keys.DIK_LEFT then self:CursorMove(false)
	elseif dik == DIK_keys.DIK_RIGHT then self:CursorMove(true)
	elseif dik == DIK_keys.DIK_LMENU then self:on_ButtonChangeLang_clicked()
	else
		local letter = string_sub(self.edit_box:GetText(),-1)
		if letter and letter~="" then
			self:ChangeText(letter)
			self.edit_box:SetText("")
		end
	end
end

----------------------------------------------------------------------------------------
local eng = [[qwertyuiop[]asdfghjkl;'zxcvbnm,./QWERTYUIOP{}ASDFGHJKL:"ZXCVBNM<>?!@#$%^&*()-_+=\| 0123456789]]
local rus = [[йцукенгшщзхъфывапролджэ€чсмитьбю.…÷” ≈Ќ√Ўў«’Џ‘џ¬јѕ–ќЋƒ∆Ёя„—ћ»“№Ѕё,!"є;%:?*()-_+=\/ 0123456789]]
local translit_tbl = {}
for pos = 1, #rus do
	translit_tbl[string.sub(eng, pos, pos)] = string.sub(rus, pos, pos)
end

function translit(letter)
	return translit_tbl[letter] or ""
end

function separate_srt(str,k)
	local k_pos = string_find(str,k,1,true)
	local len = #str
	local str1, str2 = "", ""
	if k_pos and len>1 then
		str1 = k_pos>1 and string_sub(str,1,k_pos-1) or ""
		str2 = len<=k_pos and "" or string_sub(str,k_pos+1)
	end
	return str1, str2
end
