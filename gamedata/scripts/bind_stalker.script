-- -*- mode: lua; encoding: windows-1251 -*-
-- файл из мода "Народной солянки 2009" от 14.06.
-- Адаптирован для Менеджера оружия. Rulix aka Bak от 2.07.09
-- Адатировал: Idler.

local upd_time = 0
local upd_time1 = 0
local upd_time2 = 0
local upd_time3 = 0
local upd_time4 = 0
local upd_time5 = 0

function init(obj)
	xr_motivator.AddToMotivator(obj)
end

function actor_init(npc)
	npc:bind_object(actor_binder(npc))
end

local det_suit_id = nil
local game_difficulty_by_num = {
	[0] = "gd_novice",
	[1] = "gd_stalker",
	[2] = "gd_veteran",
	[3] = "gd_master"
}

post_process = 0
----------------------------------------------------------------------------------------------------------------------
class "actor_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function actor_binder:__init (obj) super(obj)
	self.bCheckStart = false
	self.loaded_active_slot = nil
	self.weather_manager = level_weathers.WeatherManager()
	self.actor_detector = xr_detector.actor_detector()
	self.is_saved = false
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_spawn(data)
	local tmr = profile_timer()
	tmr:start()

	set_extensions_flags(15)

	db.add_actor(self.object)

	sound_theme.init()

	level.show_indicators()

	self.bCheckStart = true
	self.weapon_hide = false -- спрятано или нет оружие при разговоре.

	if object_binder.net_spawn(self,data) == false then
		return false
	end

	if self.st.disable_input_time == nil then
		level.enable_input()
	end

	fly.stop()
	self.weather_manager:reset()

	if(actor_stats.add_to_ranking~=nil)then
		actor_stats.add_to_ranking(self.object:id())
	end

	--' Загружаем настройки дропа
	death_manager.init_drop_settings()
	xr_box.init_drop_box()

	xr_timers.init()

	if rx_ai then rx_ai.actor_net_spawn() end

	amk.on_game_load(obj)  
	ui_mm_opt_add.del_bad_objects()

	autozoom.init()
	ui_inv_add.init()

	sak.add_tail()

	meceniy_work.main()
	spawn_level_changer.remove_old_teleport()

	kostya_dialog.init_peshera_table()

	netpacket_pda_create.create_pda()

	akill.akill_start_sound()	--	Akill
	snp.net_spawn()		-- snp
	fly_island.release_completed_fly_islands() -- острова

	nightvision.load_pnv()
	arc_radiation.init()
	autopause.main()

	tmr:stop()
	log("actor net_spawn: %f", tmr:time())
	return true
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_destroy()
	xr_s.on_event("net_destroy")

	if(actor_stats.remove_from_ranking~=nil)then
		actor_stats.remove_from_ranking(self.object:id())
	end

	if self.dist_wnd then
		xr_s.unregister_callback("update", self.dist_func)
		get_hud():RemoveDialogToRender(self.dist_wnd)
		self.dist_wnd = nil
		self.dist_func = nil
	end

	db.del_actor(self.object)

	sr_light.clean_up ()

	self.object:set_callback(callback.inventory_info, nil)
	self.object:set_callback(callback.article_info, nil)
	self.object:set_callback(callback.on_item_take, nil)
	self.object:set_callback(callback.on_item_drop, nil)
	self.object:set_callback(callback.trade_sell_buy_item, nil)
	--self.object:set_callback(callback.actor_sleep, nil)
	self.object:set_callback(callback.task_state, nil)
	--self.object:set_callback(callback.map_location_added, nil)
	self.object:set_callback(callback.level_border_enter, nil)
	self.object:set_callback(callback.level_border_exit, nil)
	self.object:set_callback(callback.take_item_from_box, nil)
	self.object:set_callback(callback.use_object, nil)
	self.object:set_callback(callback.death, nil)
	-- new callbacks
	self.object:set_callback(callback.on_ruck, nil)
	self.object:set_callback(callback.on_slot, nil)
	self.object:set_callback(callback.on_belt, nil)
	self.object:set_callback(callback.on_key_press, nil)
	self.object:set_callback(callback.on_key_release, nil)
	self.object:set_callback(callback.on_mouse_wheel, nil)
	self.object:set_callback(callback.on_create_cell_item, nil)
	self.object:set_callback(callback.on_select_item, nil)
	self.object:set_callback(callback.on_focus_item, nil)
	self.object:set_callback(callback.on_focus_lost_item, nil)

	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:destroy()
		sr_psy_antenna.psy_antenna = false
	end

	xr_sound.stop_all_sound_object()
--[[
	if iniStatistic then
		get_console():execute("load ~~~ amk.dump_table(iniLines):")
		amk.dump_table(iniLines)
		get_console():execute("load ~~~ amk.dump_table(iniOtherLines):")
		amk.dump_table(iniOtherLines)
		get_console():execute("load ~~~ amk.dump_table(iniStat):")
		local t = {}
		for sect, count in pairs(iniStat) do
			table.insert(t, {sect, count})
		end
		table.sort(t, function(t1, t2) return t1[2] > t2[2] end)
		amk.dump_table(t)
	end
]]
	set_extensions_flags(0)
	object_binder.net_destroy(self)
end

----------------------------------------------------------------------------------------------------------------------
function actor_binder:reinit()
	object_binder.reinit(self)
	
	local npc_id = self.object:id()

	db.storage[npc_id] = { }

	self.st = db.storage[npc_id]
	self.st.pstor = nil

	self.next_restrictors_update_time = -10000

	self.object:set_callback(callback.inventory_info, self.info_callback, self)
	self.object:set_callback(callback.article_info, self.article_callback, self)
	self.object:set_callback(callback.on_item_take, self.on_item_take, self)
	self.object:set_callback(callback.on_item_drop, self.on_item_drop, self)
	self.object:set_callback(callback.trade_sell_buy_item, self.on_trade, self) -- for game stats
	--self.object:set_callback(callback.actor_sleep, self.sleep_callback, self)
	self.object:set_callback(callback.task_state, self.task_callback, self)
	--self.object:set_callback(callback.map_location_added, self.map_location_added_callback, self)
	self.object:set_callback(callback.level_border_enter, self.level_border_enter, self)
	self.object:set_callback(callback.level_border_exit, self.level_border_exit, self)
	self.object:set_callback(callback.take_item_from_box, self.take_item_from_box, self)
	self.object:set_callback(callback.use_object, self.on_use_object, self)
	self.object:set_callback(callback.death, self.death_callback, self)
	-- new callbacks
	self.object:set_callback(callback.on_ruck, self.on_ruck_action, self)
	self.object:set_callback(callback.on_slot, self.on_slot_action, self)
	self.object:set_callback(callback.on_belt, self.on_belt_action, self)
	self.object:set_callback(callback.on_key_press, self.key_press, self)
	self.object:set_callback(callback.on_key_release, self.key_release, self)
	self.object:set_callback(callback.on_mouse_wheel, self.mouse_wheel, self)
	self.object:set_callback(callback.on_create_cell_item, self.cell_item_create, self)
	self.object:set_callback(callback.on_select_item, self.inv_item_select, self)
	self.object:set_callback(callback.on_focus_item, self.inv_item_focus, self)
	self.object:set_callback(callback.on_focus_lost_item, self.inv_item_focus_lost, self)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:cell_item_create(item)
	ui_inv_add.recolor_slot_item(item)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:inv_item_focus_lost(obj)
	xr_s.on_event("on_item_focus_lost", obj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:inv_item_focus(obj)
	xr_s.on_event("on_item_focus", obj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_belt_action(obj)
	inventory.add_on_belt(obj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_slot_action(obj)
	art_hit.update(obj)
	xr_s.on_event("on_slot", obj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:inv_item_select(obj)
	xr_s.on_event("on_item_select", obj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:mouse_wheel(w)
	xr_s.on_event("on_mouse_wheel", w-100000)
end
----------------------------------------------------------------------------------------------------------------------
local kShifts = { [DIK_keys.DIK_RSHIFT] = true, [DIK_keys.DIK_LSHIFT] = true }
function actor_binder:key_press(dik)
	if kShifts[dik] then _G.ShiftPressed = true end
	local bind = dik_to_bind(dik)
	hotkeys.on_key(dik, bind)
	xr_s.on_event("on_key_press", dik, bind)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:key_release(dik)
	if kShifts[dik] then _G.ShiftPressed = nil end
	xr_s.on_event("on_key_release", dik, dik_to_bind(dik))
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_ruck_action(obj)
	inventory.remove_from_belt(obj)
	nightvision.checking_droped_obj(obj) -- ПНВ
	xr_s.on_event("on_ruck", obj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:death_callback(victim, who)
	if victim:id() == 0 then
		difficulty_manager.deathStatCollect()
		archievements.on_actor_death(who)
	end
	
	if sleep_manager.is_sleep_active() then
		sleep_manager.stopper(true)
	end
	
	-- Правка неотключения пения контролера после смерти гг
	if kostya_dialog.kill_online_kontroller() then
		news_manager.send_tip(db.actor, "Если во время смерти ГГ звучало \"пение\" контролера, то дождитесь его завершения прежде, чем загрузить сохранение, иначе придется полностью перезапускать игру.", nil, "nano", 30000)
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:take_item_from_box(box, item)
	local s = item:section()
	if string.find(s,"val_zapis_") then
		valerich_treasures.spawn_next( tonumber(string.sub(s,11)) )
	end

	-- если калбек на взятие предмета из тайника поставить сюда, а не в on_item_take, то калбек сработает только один раз
	-- и не будет вызываться каждый раз при лоаде, поэтому поршнем его отсекать не нужно
	fly.returner_clear_pos(item)
	snp.check_treasure_item(item, box)
	spawn_level_changer.on_take_teleportator(item)
	braad_test.mina_band2(item)
	
	-- подъем рюкзаков
	if box:is_inv_box_empty() then
		s = box:section()
		if transparent_treasure.IsTaken(s) and s ~= "m_inventory_box" then 
			level.start_stop_menu(level.main_input_receiver(), true)

			-- здесь можно прописывать калбеки взятия на проверку по секции тайника, чтобы не придумывать уникальные предметы
			snp.check_treasure(box)
		
			local sim = alife()
			sim:create("treasure_item", vector():set(0, 0, 0), 0, 0, 0)
			local se_box = sim:object(box:id())
			if se_box then sim:release(se_box, true) end
		end
	  
		archievements.acv_count_event("acv_sled", 300, "Следопыт")
	end

	s = box:story_id()
	if s == nil then
		return
	end

	treasure_manager.take_item_from_box(box, s)
	zamok.remove(box, item)

	--AMK UTILS--
	amk.on_item_take_from_box(box,item)
	--AMK UTILS--
--	xr_s.on_event("on_item_take_from_box", item, box)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_enter(npc, info_id)
	self.actor_detector:actor_enter()
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_exit(npc, info_id)
	self.actor_detector:actor_exit()
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:info_callback(npc, info_id)
--  printf("*INFO*: npc='%s' id='%s'", npc:name(), info_id)
--	log1("- actor_binder:info_callback info_id = "..info_id)
	if string.find(info_id, "^ui_") then
		ui_inv_add.on_info(info_id)
		ui_trade_add.on_info(info_id)
		ui_pda_add.on_info(info_id)
		xr_s.on_event("on_info", info_id)
	else
		wawka.check_npc_dead()
		archievements.on_info(info_id)
		meceniy_spawn.respawn(info_id)
		--' Сюжет и отметки на карте
		actor_info_check.check(info_id)
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_trade (item, sell_bye, money)
    if sell_bye == true then
		
    else       
		if isMagazinedWeapon(item) then
			item:unload_magazine()
		end
		archievements.on_receive_count_item(item)
    end
	trade_manager.on_trade(item, sell_bye)
	archievements.acv_money()
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:article_callback(npc, group, name, atype)
	--printf("article_callback [%s][%s]", group, name)
	if device().precache_frame >1 then return end
	news_manager.send_encyclopedy(atype, group, name)
end
--------------------------------------------------------------------------------------------------
function actor_binder:on_item_take (obj)
	--game_stats.update_take_item (obj, self.object)
	--AMK UTILS--
	gps_habar.on_item_take(obj)
	amk_utils.inventory_update(obj, 1)

	if obj:is_ammo() then
		dunin_ammo.on_take(obj)
	end 
	arc_main.get_item(obj)
	if xrs_ai then xrs_ai.actor_item_take(obj) end 

	art_hit.hit_by_art(obj)
    babah.on_item_take(obj)
  
	xr_statistic.addArtefact(obj)
	
	kostya_dialog.checking_taken_item59(obj)
	kostya_dialog.checking_taken_item61(obj)
	kostya_dialog.checking_taken_item63(obj)
	snp.checking_taken_item_snp(obj)
	spawn_level_changer.on_take_teleporter(obj)
	archievements.on_receive_count_item(obj)
	archievements.on_item_take(obj)
	fly.returner_clear_pos()

	ui_inv_add.on_item_take(obj)
	xr_s.on_event("on_item_take", obj)

	actor_take_item.check(obj)
	
	--[[ фикс переодевания гг при взятии броника
	if obj:clsid() == clsid.equ_stalker_s then
		local outfit = db.actor:get_current_outfit()
		if outfit and outfit:id() ~= obj:id() and alife():object(outfit:id())~=nil then
			db.actor:transfer_item(outfit, db.actor)
		end
	end
	]]
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_drop (obj)
	ui_inv_add.restore_slot(obj)
	inventory.remove_from_belt(obj)
	
	babah.li(obj)
	
     -- Vergas ogg-player
	if string.find(obj:section(), "ogg_flash_") then
		player_ogg.lose_flash(obj)
	end
	
	--AMK UTILS--
	amk.on_item_drop(obj)
	amk_utils.inventory_update(obj, -1)
	--AMK UTILS--
	arc_main.lose_item(obj)
	
	zamok.add(obj)
	
	nightvision.checking_droped_obj(obj) -- ПНВ
	ui_inv_add.on_item_drop(obj)
	
	actor_drop_item.check(obj)
	
	xr_s.on_event("on_item_drop", obj)
end
----------------------------------------------------------------------------------------------------------------------

function actor_binder:task_callback(_task, _objective, _state)
	task_manager.task_callback(_task:get_id(), _objective:get_idx(), _state)
	if _objective:get_idx() == 0 then
		if _state == task.fail then
			if db.actor then
				db.actor:give_info_portion("acv_task_fail")
			end
			news_manager.send_task(db.actor, "fail", _task, _objective)
		elseif _state == task.completed then
			task_manager.reward_by_task(_task)
			news_manager.send_task(db.actor, "complete", _task, _objective)
		else
			news_manager.send_task(db.actor, "new", _task, _objective)
		end
	else
		if _task:get_objective(0):get_state() == task.in_progress then
			news_manager.send_task(db.actor, "update", _task, _objective)
		end
	end
end

----------------------------------------------------------------------------------------------------------------------
function actor_binder:map_location_added_callback(spot_type_str, object_id)
	if (false==app_ready()) or (device().precache_frame>1) then return end
	--'news_manager.send_task(db.actor, "new")
end
----------------------------------------------------------------------------------------------------------------------
scopeUsed = false
function actor_binder:update(delta)
	local time = time_global()
	local actor = self.object
		
	amk.oau_watchdog=200
	amk.oau_reason="actor_binder:update"
	amk.oau_watchdog=2001
	object_binder.update(self, delta)
	amk.oau_watchdog=1881
	xr_s.on_event("update", delta)
	amk.oau_watchdog=188
	if self.bCheckStart then
	--	printf("SET DEFAULT INFOS")
		
		self.object:activate_slot(self.loaded_active_slot or -1)
		
		if not has_alife_info("storyline_actor_start") and
			(level.name() == "l01_escape")
		then
			self.object:give_info_portion("storyline_actor_start")
			_G.g_start_avi = true
		end
		
		if not has_alife_info("encyclopedy") and has_alife_info("arhara_shaxter_start") then
			self.object:give_info_portion("encyclopedy")
		end

		if not has_alife_info("global_dialogs") then
			self.object:give_info_portion("global_dialogs")
		end

		if not has_alife_info("level_changer_icons") then
			self.object:give_info_portion("level_changer_icons")
		end

		ui_mm_opt_add.send_bad_objects_info()
		archievements.acv_death()
		
		naxac_test.repair()
		braad_test.marsh_band_spawn()

		if amk.load_variable("no_save", false) then
			abort("Этим сохранением пользоваться нельзя. Удалите его.")
		end
		amk.save_variable("no_save", true)
		
		self.bCheckStart = nil
		db.first_update = true
	end 
	
	amk.oau_watchdog=1999
	xr_timers.update(delta)

	amk.oau_watchdog=199
	fly.update()
	fly.returner_update()
	lootmoney.transfer_all_desired()
	bind_monster.transfer_all_desired()
	
	stco.update()
	
	amk.oau_watchdog=3011
	self:rotting() -- гниение тупов
	
	amk.oau_watchdog=3001
	if upd_time5 < time then
	--	log1("upd_time5: "..delta)
		upd_time5 = time + 120000
		
		fly_island.check_code()
		buusty_dialog.xo_repair_finished()
	elseif upd_time4 < time then
	--	log1("upd_time4: "..delta)
		upd_time4 = time + 10000
		amk.oau_watchdog=301

		if (not has_alife_info("acv_stay1")) and amk.game_days() > 182 then
			actor:give_info_portion("acv_stay1")
		elseif (not has_alife_info("acv_stay2")) and amk.game_days() > 365 then
			actor:give_info_portion("acv_stay2")
		end
	elseif upd_time3 < time then
	--	log1("upd_time3: "..delta)
		upd_time3 = time + 5000

		amk.oau_watchdog=302
		dunin_ammo.on_update()
		amk.oau_watchdog=1936
		sak.nepis_umer()
		amk.oau_watchdog=19393
		braad_test.grib_respawn()
		amk.oau_watchdog=19396
		amk_alcohol.update()
	elseif upd_time2 < time then
	--	log1("upd_time2: "..delta)
		upd_time2 = time + 1000
		
		amk.oau_watchdog=1931
		meceniy_utils.on_actor_update_callback()
		amk.oau_watchdog=1933
		arc_ballast.check_ballast()
		amk.oau_watchdog=1934
		meceniy_work.mainw()
		nano_suit_moduls.nano_update()
		-- встроенный детектор аномалий
		if actor:item_in_slot(6) and actor:item_in_slot(6):section() == "exo_doktor_outfit" then
			if not det_suit_id then
				if actor:object("detector_suit") then
					det_suit_id = actor:object("detector_suit"):id()
				else
					det_suit_id = (alife():create("detector_suit",actor:position(), actor:level_vertex_id(),actor:game_vertex_id(), 0)).id
				end
			end
		else
			if det_suit_id then
				local det = alife():object(det_suit_id)
				if det then
					actor:move_to_ruck(actor:object("detector_suit"))
					alife():release(det,true)
				end
				det_suit_id = nil
			end
		end
	elseif upd_time1 < time then
	--	log1("upd_time1: "..delta)
		upd_time1 = time + 500
		
		amk.oau_watchdog=303
		doc_viewer.update()
		amk.oau_watchdog=179
		babah.update(delta)
		amk.oau_watchdog=178
		danger.enemy_calmdown()
		lightning.strike_if_needed()
	--	Akill begin
		akill.check_quests()
	--	Akill end
		amk.oau_watchdog=183
		snp.update()
	elseif upd_time < time then
	--	log1("upd_time: "..delta)
		upd_time = time + 200
		
		amk.oau_watchdog=304
		if bit_and(actor:get_actor_int(nil, 1480), 1) == 1 then
			if not scopeUsed then
				local item = actor:active_item()
				if item then
					--log1("- actor:active_item():section()="..tostring(item:section()))
					
					if ui_inv_descr.is_nv_scope_wpn(item:section()) and ( not xr_conditions.is_day() ) then
						level.add_pp_effector("bast.ppe", 1035, true)
						get_console():execute ("r2_mblur 0.6")
						self.nv_on = true
					end
						
					if item:clsid() == clsid.wpn_binocular_s then
						if item:section()=="wpn_binoc_dist" and self.dist_wnd == nil then
							self.dist_wnd = CUIStatic()
							self.dist_wnd:Init(250, 150, 100, 50)
							self.dist_wnd:SetFont(GetFontLetterica25())
							self.dist_wnd:SetTextColor(255,25,120,25)
							get_hud():AddDialogToRender(self.dist_wnd)
							self.dist_func = function (time_delta, wnd)
								if wnd then
									wnd:SetText(string.format("%.2f", level.get_target_dist()))
								end
							end
							xr_s.register_callback("update", self.dist_func, self.dist_wnd)
						end
						scopeUsed = true
					elseif IAmAWeapon[item:clsid()] then
						local t = amk.get_weapon_data(alife():object(item:id()), true)
						scopeUsed = ( bit_and(t.addon_flags, 1) == 1
							or sys_ini:r_u32(item:section(), "scope_status") == 1 )
					end
				end
			end
		else
			scopeUsed = false
			if self.dist_wnd then
				xr_s.unregister_callback("update", self.dist_func)
				get_hud():RemoveDialogToRender(self.dist_wnd)
				self.dist_wnd = nil
				self.dist_func = nil
			end
			if self.nv_on then
				self.nv_on = nil
				level.remove_pp_effector(1035)
				get_console():execute ("r2_mblur 0.")
			end
		end
		if ui_rad.enabled then
			ui_rad.update(not scopeUsed)
			sak.show_time(scopeUsed)
		end
	end
	amk.oau_watchdog=300
	arc_radiation.on_actor_update(delta)
	amk.oau_watchdog=3002
	arc_health.on_actor_update(delta)
	amk.oau_watchdog=3003

	amk.oau_watchdog=198
	-- апдейт погоды
	self.weather_manager:update()
	amk.oau_watchdog=197
	-- апдейт схемы детектора
	self.actor_detector:update()
	amk.oau_watchdog=1966
	player_ogg.used_item(delta)	-- Vergas ogg-player
	amk.oau_watchdog=196  
	--ms_ai.sleep_manager()
	amk.oau_watchdog=195
	-- апдейт звуковой схемы актера
	xr_sound.update_actor()
	amk.oau_watchdog=194
	meceniy_work.set_invisible()
	amk.oau_watchdog=192
-- ----------------------------------------------------- ARENA_EXTENSION_MOD--------------------------------------------------------
	aem_manager.get_aem():update()
-- ----------------------------------------------------- ARENA_EXTENSION_MOD--------------------------------------------------------
	amk.oau_watchdog=191
  
	-- Обновление отключения ввода с клавиатуры.
	if self.st.disable_input_time ~= nil and
		game.get_game_time():diffSec(self.st.disable_input_time) >= self.st.disable_input_idle 
	then
		level.enable_input()
		self.st.disable_input_time = nil
	end
	-- Обновление сна с переносом чувака в указанную позицию
	if self.st.sleep_relocate_time ~= nil and
		game.get_game_time():diffSec(self.st.sleep_relocate_time) >= self.st.sleep_relocate_idle 
	then
	--	actor:give_info_portion("teleport_started")
		actor:set_actor_position(self.st.sleep_relocate_point)
		local dir = self.st.sleep_relocate_point:sub(self.st.sleep_relocate_look)
		self.object:set_actor_direction(dir:getH())
	--	actor:give_info_portion("teleport_finished")
		self.st.sleep_relocate_time = nil
	end
	amk.oau_watchdog=19112
	
	-- Апдейт прятание оружия игрока во время диалога
	if check_hide_weapon() or actor:is_talking() then
		if self.weapon_hide == false then
			actor:hide_weapon()
			self.weapon_hide = true
		end
	else
		if self.weapon_hide == true then
			actor:restore_weapon()
			self.weapon_hide = false
		end
	end 

	amk.oau_watchdog=191
	-- обновление рестрикторов, которые под логикой, срабатывает через интервалы времени
	if self.next_restrictors_update_time < time then
		bind_restrictor.actor_update(delta)
		
		-- Апдейтим наш телепорт (Kostya_level)
		bind_mteleport.actor_update(delta)
		self.next_restrictors_update_time = time + 200

		task_manager.actor_update()
	end

	amk.oau_watchdog=190
	-- обновление постпроцессов
	if post_process ~= 0 then
		if post_process:update () == true then
			post_process = 0
		end
	end

	amk.oau_watchdog=189
  
	-- обновление пси-антенны
	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:update(delta)
	end

	amk.oau_watchdog=187
	--AMK UTILS--
	amk.on_actor_update(delta)
	--AMK UTILS--
	amk.oau_watchdog=186
  
	-- added by Red75. Контроль за переполнением 
	if self.warning then
		self.warning=nil
		get_hud():AddCustomStatic("hud_save_warning")
		local wnd=get_hud():GetCustomStatic("hud_save_warning"):wnd()
		if self.critical==1 then
			wnd:SetTextST(game.translate_string("amk_warn_trans"))
			self.critical=nil
		elseif self.critical==2 then
			wnd:SetTextST(game.translate_string("amk_warn_trans_critical"))
			self.critical=nil
		else
			wnd:SetTextST(game.translate_string("amk_warn_attention"))
		end
	elseif self.wt and self.wt<time_global() then
		self.wt=nil
		if get_hud():GetCustomStatic("hud_save_warning") then
			get_hud():RemoveCustomStatic("hud_save_warning")
		end
	end
  
	amk.oau_watchdog=182
	if xrs_ai then xrs_ai.actor_update(delta) end
	amk.oau_watchdog=1820
	if rx_ai then rx_ai.actor_update() end
	amk.oau_watchdog=181
	biodetector.update(delta)
	amk.oau_watchdog=180
	-------
	--проверка зависания биндеров НПЦ и мобов раз в 0,5сек
	--закомментировано на случай разбора полётов
--[[  if upd_time3 == nil then
    upd_time3 = time + 500
  elseif upd_time3 < time then
    upd_time3 = time + 500  
    if db and db.storage then
      for k,v in pairs(db.storage) do
        if v.us ~= nil and v.us ~= 0 then
          abort("binder(%s) zavis(%s)", db.creatures[k]:name(), v.us)
          v.us = nil				
          break
        end
      end
      self.is_saved = false
    end
  end]]

	amk.oau_watchdog=184
	bind_det_arts.update()
  
	amk.oau_watchdog=0
	amk.oau_reason=""    
  
	--[[ Вывод информации level_vertex_id, game_vertex_id, pos
	if db.debug then
		local hud = get_hud()
		local cs = hud:GetCustomStatic("cs_debug" )
		if cs == nil then
			cs = hud:AddCustomStatic("cs_debug", true)
		end
		local lvid, gvid = actor:level_vertex_id(), actor:game_vertex_id()
		local pos, dir = actor:position(), device().cam_dir -- db.actor:direction()
		local pos2 = level.vertex_position(lvid)
		local vdist = pos2:distance_to(pos)
		local vdistxz = pos2:distance_to_xz(pos)
		local valid = vdist <= 0.7
		local msg = string.format("lvid:  %d", lvid) ..										-- левел вертекс
					string.format("gvid: %d\\n", gvid) ..									-- гейм вертекс
					string.format("pos:   %.2f,%.2f,%.2f\\n", pos.x, pos.y, pos.z) ..		-- позиция актора
					string.format("vpos:  %.2f,%.2f,%.2f\\n", pos2.x, pos2.y, pos2.z) ..	-- позиция левел вертекса
					string.format("vdist: %.2f, vdistXZ: %.2f\\n", vdist, vdistxz) ..		-- расстояние от гг до вертекса
					string.format("dir:   %.2f,%.2f,%.2f\\n", dir.x, dir.y, dir.z) ..		-- направление взгляда актора
					string.format("valid: %s", tostring(valid))								-- есть ли аи сетка?
		if cs ~= nil then
			cs:wnd():SetText(msg)
		end
	end
	]]
end
--[=[ светки без проверки стен
----------------------------------------------------------------------------------------------------------------------
function actor_binder:hit_callback(obj, amount, local_direction, who, bone_index)
	--get_console():execute("load ~~~ hit_callback: "..tostring(has_alife_info("grenade_flash_blow")).." "..amount.." "..time_global())
	if has_alife_info("grenade_flash_blow") then
		xr_sound.get_safe_sound_object([[weapons\explo\grenade_flash]]):play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		level.add_pp_effector("teleport.ppe", 2000, false)
		amk.start_timer("run", 1.5, "bind_grenade.flash_bum1()")
		db.actor:disable_info_portion("grenade_flash_blow")
	end
end
--]=]
----------------------------------------------------------------------------------------------------------------------
function actor_binder:save(packet)
	if amk.load_variable("no_save", false) and not db.debug then
		abort("Сохранение сделано слишком быстро после загрузки. Из-за этого очень вероятно, что созданное сохранение, а также текущее игровое состояние будет повреждено. Поэтому немедленно удалите только что созданное сохранение, затем полностью перезапустите игру.")
		amk.start_timer("zonedocs_gg_kill",3,0)
	end

	-- проваливание заданий, во время которых нельзя сохраняться
	esc_fly.sidor_delo_fail()
	
	-- удаление запущенных варок перед сейвом	-- НАХ*Я???
--	amk.remove_timer("af_transform_universal")
	-- сохранение дозы радиации
	arc_radiation.save_rad_dose()
	xr_timers.save()
	
	if level.get_game_difficulty() == 0 then
		db.actor:give_info_portion("acv_real_fail")
	end

	if utils.level_changing() then
		db.actor:give_info_portion("level_changing")
		if not has_alife_info("teleport_started") then
			archievements.acv_count_event("acv_skit", 300, "Скиталец")
		end
	end
	
	if rx_ai then rx_ai.actor_save(packet) end
	
	local pk1=fake_net_packet.fake_net_packet()
	self:save_old(pk1)
	amk.mylog("Packet size is "..pk1:w_tell())
	if pk1:w_tell()>7500 then
		self.warning=true
		self.critical=1
		self.wt=time_global()+60000
		amk.emergency_cleanup()
		self:save_old(packet)
		amk.mylog("Actor packet size is "..packet:w_tell().."!")
		amk.send_tip("Actor packet size critical=2 >7500 ","Размер нетпакета ГГ критический:"..pk1:w_tell(),0,15,"gen_info")
		amk.emergency_restore()
	elseif pk1:w_tell()>6000 then
		self.wt=time_global()
		self:save_old(packet)
	else
		self:save_old(packet)
		self.wt=time_global()
	end
	self.is_saved = true
	log1("actor_binder:save, packet size = "..packet:w_tell().." bytes")
end


function actor_binder:save_old(packet)
--	local save_treasure_manager = true
	
--	printf("actor_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	--' Сохраняем уровень сложности
	packet:w_u8(level.get_game_difficulty())

	--' Сохраняем данные об отключенном вводе
	if self.st.disable_input_time == nil then
		packet:w_bool(false)
	else
		packet:w_bool(true)
		utils.w_CTime(packet, self.st.disable_input_time)
	end

	xr_logic.pstor_save_all(self.object, packet)
	self.weather_manager:save(packet)

	sr_psy_antenna.save( packet )
	
	treasure_manager.save(packet)        

	task_manager.save(packet)
	self.actor_detector:save(packet)

	-- naxac
	local it = self.object:active_slot()
	if it>10 then it = 20 end
	packet:w_u8(it)

	for i = 1, 2 do
		it = self.object:item_in_slot(i)
		if it and sys_ini:r_u32(it:section(), "slot") ~= i then
			packet:w_u16(it:id())
		end
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:load(reader)
	object_binder.load(self, reader)

	--' Загружаем уровень сложности
	local game_difficulty = reader:r_u8()
	if game_difficulty >= 128 then           
		game_difficulty = game_difficulty - 128
	end                                      

	get_console():execute("g_game_difficulty "..game_difficulty_by_num[game_difficulty])

	if reader:r_eof() then
		abort("Это сохранение необратимо повреждено - удалите его, и переиграйте с более раннего сохранения. Продолжать игру на этом сохранении категорически запрещено!")
		string.format("%s")
	end

	local stored_input_time = reader:r_bool()
	if stored_input_time == true then
		self.st.disable_input_time = utils.r_CTime(reader)
	end

	xr_logic.pstor_load_all(self.object, reader)
    
	self.weather_manager:load(reader)

	sr_psy_antenna.load(reader)
	
	treasure_manager.load(reader)       

	task_manager.load(reader)
	self.actor_detector:load(reader)
	
	
	if xr_logic.pstor_retrieve(self.object,"emerg",false) then -- нельзя использовать amk.load_varible(), так как db.actor ещё не определён
		self.warning=true
		self.critical=2
		self.wt=time_global()+60000
	end
	
	ui_pda_notepad.on_load_game()
	
	-- только установили, ничего не сохранено
	if reader:r_eof() then return end

	-- Загружаем активный слот
	local slot = reader:r_u8()
	if slot == 20 then slot = nil end
	self.loaded_active_slot = slot
	-- Загружаем пушки в неродных слотах
	while not reader:r_eof() do
		local i = reader:r_u16()
		local se_item = alife():object(i)
		if se_item then
			local item = level.object_by_id(i)
			if item then
				ui_inv_add.slot_fix(i, item)
			else
				level.client_spawn_manager():add(i, 0, ui_inv_add.slot_fix)
			end
		end
	end
	log("actor_binder:load, stream size = "..reader:r_tell().." bytes")
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_use_object(obj)
    actor_use_item.check(obj)
--	xr_s.on_event("on_item_use", obj)
end

function actor_binder:rotting()
	if db.rotting > 0 then
		if not self.rot then
			self.rot = {}
			self.rot.next_sound = time_global()+math.random(4000,6000)
			self.rot.sound_id = 0
			self.rot.prev_sound_id = 0
			self.rot.effactor = 0.1
			level.add_pp_effector("alcohol.ppe", 5436, true)
			level.set_pp_effector_factor(5436, self.rot.effactor)
		end
		
		if self.rot.next_sound < time_global() then
			repeat
				self.rot.sound_id = math.random(1,14)
			until self.rot.sound_id ~= self.rot.prev_sound_id
			
			self.rot.sound = xr_sound.get_safe_sound_object([[rotting\rotting_]]..self.rot.sound_id)
			self.rot.sound:play(self.object, 0, sound_object.s2d)
			self.rot.next_sound = time_global()+self.rot.sound:length()+math.random(4000,6000)
			self.rot.prev_sound_id = self.rot.sound_id
			
			if self.rot.effactor < 1 then
				self.rot.effactor = self.rot.effactor+0.05
				level.set_pp_effector_factor(5436, self.rot.effactor)
			end
		end
	else
		self.rot = nil
		level.remove_pp_effector(5436)
	end
end

local weap_hide_tbl = {}
function check_hide_weapon()
	for k in pairs(weap_hide_tbl) do
		return true
	end
	return false
end

-- Weapon functions
function hide_weapon(v)
	weap_hide_tbl[v or -1] = true
end
function restore_weapon(v)
	weap_hide_tbl[v or -1] = nil
end
